
opt_out_usage

default_platform(:ios)

platform :ios do

# Config variables
app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)

team_name = CredentialsManager::AppfileConfig.try_fetch_value(:team_name)
team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
 # Constants

 schemes = {
  "BookAudioPlayer" => [
    "BookAudioPlayer",
  ],
}  

configurations = {
  "BookAudioPlayer" => "Release",
}

after_all do |lane, options|
  clean_build_artifacts
end

error do |lane, exception|
  clean_build_artifacts
end


  before_all do
    # This is required to setup the temporary keychain
    setup_ci
    # load_asc_api_token
  end

 # Building and Releasing

  desc "Deploy a new version to the App Store"
  desc "Options: scheme, target, install_pods"
  lane :release do |options|
    scheme = options[:scheme] || "BookAudioPlayer"
    target = options[:target] || "BookAudioPlayer"

    app_identifier = get_bundle_id(target: target)

    clear_derived_data

    if is_ci
      load_app_store_connect_api_token
    end

    
    update_code_signing

    # Disable automatic code signing -> build -> enable again
    set_manual_code_signing(
      provisioning_profile_mapping: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
      scheme: scheme,
    )
   
    gym(
      scheme: "#{scheme}",
      clean: true,
      output_directory: "output",
      archive_path: "output/#{scheme}.xcarchive", # Added missing colon here
      output_name: "#{scheme}.ipa",
      include_bitcode: false,
      skip_profile_detection: true,
      export_method: "app-store",
      export_options: {
        # use only provisioning profiles from match
        provisioningProfiles: lane_context[SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING],
   },
  )

    vs = make_version_string(
      version_number: get_version_number(target: target),
      build_number: get_build_number,
    )
    UI.success "Successfully released BookAudioPlayer iOS RELEASE #{scheme} #{vs}"

  end



  desc "Builds and uploads the app using the dev environment."
  desc "Available options: skip_build_upload"
  lane :dev do | options |
    
  end


  desc "Builds and uploads the app using the staging environment."
  desc "Available options: skip_build_upload"
  lane :staging do | options |
    

  end

  desc "Increment build number in project"
  lane :increment_build do
    increment_build_number
  end

  desc "Set version."
  desc "Options: version"
  lane :set_version do |options|
    version = options[:version]

    UI.user_error!("Wrong version parameter") if version.nil?

    increment_version_number(version_number: version)
  end

  private_lane :set_auto_code_signing do |options|
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    UI.user_error!("Wrong parameters") if scheme.nil? || provisioning_profile_mapping.nil?

    bundle_id_to_scheme = build_bundle_id_to_scheme_mapping(
      schemes: schemes,
      scheme: scheme,
      provisioning_profile_mapping: provisioning_profile_mapping,
    )

    provisioning_profile_mapping.each do |key, value|
      update_code_signing_settings(
        use_automatic_signing: true,
        targets: [bundle_id_to_scheme[key]],
        profile_name: "",
        team_id: team_id,
        code_sign_identity: "iPhone Developer",
      )
    end
  end

  desc "Updates code signing on the current machine"
  private_lane :set_manual_code_signing do |options|
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    UI.user_error!("Wrong parameters") if scheme.nil? || provisioning_profile_mapping.nil?

    bundle_id_to_scheme = build_bundle_id_to_scheme_mapping(
      schemes: schemes,
      scheme: scheme,
      provisioning_profile_mapping: provisioning_profile_mapping,
    )

    provisioning_profile_mapping.each do |key, value|
      update_code_signing_settings(
        use_automatic_signing: false,
        targets: [bundle_id_to_scheme[key]],
        profile_name: value,
        team_id: team_id,
        code_sign_identity: "iPhone Distribution",
      )
    end
  end

  desc "Updates code signing on the current machine"
  lane :code_signing do
    # Global parameters are loaded from the Matchfile
    match(type: "appstore", readonly: is_ci?)
    match(type: "adhoc", force_for_new_devices: true)
    match(type: "development", force_for_new_devices: true)
  end

  desc "Runs Match for the current configuration."
  private_lane :update_code_signing do | options |
    puts "üîè  Updating Code Signing"
    match(force_for_new_devices: is_ci?, template_name: "ApplePay In-App Provisioning Distribution")
  end

  def build_bundle_id_to_scheme_mapping(options)
    schemes = options[:schemes]
    scheme = options[:scheme]
    provisioning_profile_mapping = options[:provisioning_profile_mapping]

    if schemes.nil? || scheme.nil? || provisioning_profile_mapping.nil?
      UI.user_error!("Wrong parameters")
    end

    bundle_id_to_scheme = {}
    dependent_targets = schemes[scheme]
    for target in dependent_targets
      bundle_id_to_scheme[get_bundle_id(target: target)] = target
    end

    bundle_id_to_scheme
  end

  def make_version_string(options)
    version = options[:version_number]
    build = options[:build_number]

    UI.user_error!("Wrong version parameter") if version.nil?
    UI.user_error!("Wrong build parameter") if build.nil?

    "v.#{version} (#{build})"
  end

  def get_bundle_id(options)
    project_path = options[:xcodeproj] ? File.join(options[:xcodeproj], "..") : Dir.glob("../*.xcodeproj").first
    target = options[:target]

    if project_path
      project = Xcodeproj::Project.open(project_path)
    else
      UI.user_error!("Unable to find xcodeproj file")
    end

    native_target = project.native_targets.find { |native_target| native_target.name == target }
    build_configuration = native_target.build_configurations.first

    UI.user_error!("Unable to find build configuration") if build_configuration.nil?

    build_configuration.build_settings["PRODUCT_BUNDLE_IDENTIFIER"]
  end

  desc "Loads the App Store Connect API token to use in other fastlane tools and actions"
  private_lane :load_app_store_connect_api_token do |options|
    key_id = ENV["ASC_KEY_ID"]
    UI.user_error!("APP_STORE_CONNECT_API_KEY_ID required") if key_id.nil?

    issuer_id = ENV["ASC_ISSUER_ID"]
    UI.user_error!("ASC_ISSUER_ID required") if issuer_id.nil?

    key_content = ENV["ASC_KEY_P8"]
    UI.user_error!("ASC_KEY_P8 required") if key_content.nil?

    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content,
      is_key_content_base64: true,
      duration: 1200,
      in_house: false
          )
  end

  desc "Run all the tests"
  lane :run_unit_tests do
    scan(
      scheme: "BookAudioPlayer",
      clean: true,
      devices: ["iPhone 6s", "iPad Air"]
      )
  end
  

    # increment_build_number(
    #   build_number: "#{latest_testflight_build_number + 1}",
    #   skip_info_plist:  true,
    #   xcodeproj: "BookAudioPlayer.xcodeproj"
    # )

end
